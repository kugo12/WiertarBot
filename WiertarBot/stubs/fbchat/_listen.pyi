import aiohttp
import paho.mqtt.client
from . import _events, _session
from ._common import log as log
from _typeshed import Incomplete
from typing import AsyncGenerator, Optional

TOPICS: Incomplete

def get_cookie_header(session: aiohttp.ClientSession, url: str) -> str: ...
def generate_session_id() -> int: ...
def mqtt_factory(domain: str) -> paho.mqtt.client.Client: ...

class Listener:
    session: _session.Session

    def __init__(self, *, session: _session.Session, chat_on: bool, foreground: bool): ...

    def __attrs_post_init__(self) -> None: ...
    def on_socket_open(self, client, userdata, sock) -> None: ...
    def on_socket_close(self, client, userdata, sock) -> None: ...
    def on_socket_register_write(self, client, userdata, sock) -> None: ...
    def on_socket_unregister_write(self, client, userdata, sock) -> None: ...
    def set_sequence_id(self, sequence_id: int) -> None: ...
    def listen(self) -> AsyncGenerator[_events.Event, Optional[bool]]: ...
    def disconnect(self) -> None: ...
    def set_foreground(self, value: bool) -> None: ...
    def set_chat_on(self, value: bool) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
