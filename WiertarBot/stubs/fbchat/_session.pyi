import aiohttp
import datetime
from ._common import log as log, req_log as req_log
from _typeshed import Incomplete
from typing import Any, Awaitable, Callable, Dict, List, Mapping, NamedTuple, Optional
from yarl import URL

class ProxyTimeoutError(Exception): ...

SERVER_JS_DEFINE_REGEX: Incomplete
SERVER_JS_DEFINE_JSON_DECODER: Incomplete

def write_html_to_temp(html: str) -> str: ...
def parse_server_js_define(html: str) -> Mapping[str, Any]: ...
def parse_kv(vals: List[str]) -> Dict[str, str]: ...

class AltSvc(NamedTuple):
    alt_authority: str
    max_age: int
    persist: bool
    extra_meta: Dict[str, str]

def parse_alt_svc(r: aiohttp.ClientResponse) -> Dict[str, AltSvc]: ...
def base36encode(number: int) -> str: ...
def generate_message_id(now: datetime.datetime, client_id: str) -> str: ...
def get_user_id(domain: str, session: aiohttp.ClientSession) -> str: ...
def session_factory(domain: str, user_agent: Optional[str] = ...) -> aiohttp.ClientSession: ...
def login_cookies(at: datetime.datetime): ...
def client_id_factory() -> str: ...
def find_form_request(html: str): ...
async def two_factor_helper(session: aiohttp.ClientSession, r: aiohttp.ClientResponse, on_2fa_callback: Callable[[], Awaitable[int]]) -> str: ...
def get_error_data(html: str) -> Optional[str]: ...
def get_fb_dtsg(define) -> Optional[str]: ...
def prefix_url(domain: str, path: str) -> URL: ...

class Session:
    domain: str
    @property
    def user(self): ...
    @classmethod
    async def login(cls, email: str, password: str, on_2fa_callback: Callable[[], Awaitable[int]] = ..., user_agent: Optional[str] = ...) -> Session: ...
    async def is_logged_in(self) -> bool: ...
    async def logout(self) -> None: ...
    def get_cookies(self) -> Optional[Mapping[str, str]]: ...
    @classmethod
    async def from_cookies(cls, cookies: Mapping[str, str], user_agent: Optional[str] = ..., domain: str = ...) -> Session: ...
    def __init__(self, session, client_id) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
