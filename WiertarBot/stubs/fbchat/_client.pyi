import datetime
from . import _models, _session, _threads
from ._common import log as log, req_log as req_log
from typing import AsyncIterator, BinaryIO, Callable, Iterable, Optional, Sequence, Tuple

class Client:
    session: _session.Session
    sequence_id_callback: Optional[Callable[[int], None]]
    def __init__(self, *, session: _session.Session, sequence_id_callback: Optional[Callable[[int], None]] = ...): ...

    async def fetch_users(self) -> Sequence[_threads.UserData]: ...
    async def search_for_users(self, name: str, limit: int) -> Iterable[_threads.UserData]: ...
    async def search_for_pages(self, name: str, limit: int) -> Iterable[_threads.PageData]: ...
    async def search_for_groups(self, name: str, limit: int) -> Iterable[_threads.GroupData]: ...
    async def search_for_threads(self, name: str, limit: int) -> Iterable[_threads.ThreadABC]: ...
    async def search_messages(self, query: str, limit: Optional[int]) -> AsyncIterator[Tuple[_threads.ThreadABC, int]]: ...
    async def fetch_thread_info(self, ids: Iterable[str]) -> AsyncIterator[_threads.ThreadABC]: ...
    def fetch_threads(self, limit: Optional[int], location: _models.ThreadLocation = ...) -> AsyncIterator[_threads.ThreadABC]: ...
    async def fetch_unread(self) -> Sequence[_threads.ThreadABC]: ...
    async def fetch_unseen(self) -> Sequence[_threads.ThreadABC]: ...
    async def fetch_image_url(self, image_id: str) -> str: ...
    async def get_phone_numbers(self) -> Sequence[str]: ...
    async def get_emails(self) -> Sequence[str]: ...
    async def upload(self, files: Iterable[Tuple[str, BinaryIO, str]], voice_clip: bool = ...) -> Sequence[Tuple[str, str]]: ...
    async def mark_as_delivered(self, message: _models.Message): ...
    async def mark_as_read(self, threads: Iterable[_threads.ThreadABC], at: datetime.datetime): ...
    async def mark_as_unread(self, threads: Iterable[_threads.ThreadABC], at: datetime.datetime): ...
    async def mark_as_seen(self, at: datetime.datetime): ...
    async def move_threads(self, location: _models.ThreadLocation, threads: Iterable[_threads.ThreadABC]): ...
    async def delete_threads(self, threads: Iterable[_threads.ThreadABC]): ...
    async def delete_messages(self, messages: Iterable[_models.Message]): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
