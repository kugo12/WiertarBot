from .packettypes import PacketTypes as PacketTypes
from _typeshed import Incomplete

class MQTTException(Exception): ...
class MalformedPacket(MQTTException): ...

def writeInt16(length): ...
def readInt16(buf): ...
def writeInt32(length): ...
def readInt32(buf): ...
def writeUTF(data): ...
def readUTF(buffer, maxlen): ...
def writeBytes(buffer): ...
def readBytes(buffer): ...

class VariableByteIntegers:
    @staticmethod
    def encode(x): ...
    @staticmethod
    def decode(buffer): ...

class Properties:
    packetType: Incomplete
    types: Incomplete
    names: Incomplete
    properties: Incomplete
    def __init__(self, packetType) -> None: ...
    def allowsMultiple(self, compressedName): ...
    def getIdentFromName(self, compressedName): ...
    def __setattr__(self, name, value) -> None: ...
    def json(self): ...
    def isEmpty(self): ...
    def clear(self) -> None: ...
    def writeProperty(self, identifier, type, value): ...
    def pack(self): ...
    def readProperty(self, buffer, type, propslen): ...
    def getNameFromIdent(self, identifier): ...
    def unpack(self, buffer): ...
